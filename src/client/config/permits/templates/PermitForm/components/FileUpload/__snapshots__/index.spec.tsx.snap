// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Permit Type form should successfully render when all else statement 1`] = `
<LocalizedComponent(Form)
  backButton={null}
  cancelLink={null}
  help=""
  i18n={[Function]}
  id="documents"
  name="documents"
  submitButton={null}
  validateStatus={null}
>
  <Form.Fieldset
    buttonGroup={false}
    gapSize="default"
    key="undefined.undefined"
    title=""
    twoColumns={false}
  >
    <Row
      className=""
      flex={true}
      gutter={20}
      style={null}
    >
      <Col
        className=""
        key="undefined.undefined"
        lg={null}
        md={4}
        offset={0}
        order={0}
        pull={0}
        push={0}
        sm={null}
        span={0}
        style={null}
        xl={4}
        xs={12}
      >
        <FileUpload
          accept={
            Array [
              "application/pdf",
            ]
          }
          disabled={false}
          elementType="input"
          files={Array []}
          help=""
          i18n={
            [MockFunction] {
              "calls": Array [
                Array [
                  "test",
                ],
                Array [
                  undefined,
                ],
                Array [
                  undefined,
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          maxSize={100002200}
          multiple={false}
          onChange={[Function]}
          onRemove={[Function]}
          validateStatus=""
        />
      </Col>
    </Row>
  </Form.Fieldset>
</LocalizedComponent(Form)>
`;

exports[`Permit Type form should successfully render when serviceType is provided 1`] = `
<LocalizedComponent(Form)
  backButton={null}
  cancelLink={null}
  help=""
  i18n={[Function]}
  id="documents"
  name="documents"
  submitButton={null}
  validateStatus={null}
>
  <Form.Fieldset
    buttonGroup={false}
    gapSize="default"
    key="undefined.undefined"
    title=""
    twoColumns={false}
  >
    <Row
      className=""
      flex={true}
      gutter={20}
      style={null}
    >
      <Col
        className=""
        key="test.undefined"
        lg={null}
        md={4}
        offset={0}
        order={0}
        pull={0}
        push={0}
        sm={null}
        span={0}
        style={null}
        xl={4}
        xs={12}
      >
        <FileUpload
          accept={
            Array [
              "application/pdf",
            ]
          }
          disabled={false}
          elementType="input"
          files={
            Array [
              Object {
                "documentPath": "",
                "file": Object {
                  "documentPath": "",
                  "lastModified": "",
                  "lastModifiedDate": "",
                  "loading": true,
                  "name": "test",
                  "size": "",
                  "type": "custom",
                  "value": "dummy",
                },
                "lastModified": "",
                "lastModifiedDate": "",
                "loading": true,
                "name": "test",
                "size": "",
                "status": "progress",
                "type": "custom",
                "uploaded": 2.2,
                "value": "dummy",
              },
            ]
          }
          help=""
          i18n={
            [MockFunction] {
              "calls": Array [
                Array [
                  "test",
                ],
                Array [
                  undefined,
                ],
                Array [
                  undefined,
                ],
              ],
              "results": Array [
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
                Object {
                  "type": "return",
                  "value": undefined,
                },
              ],
            }
          }
          maxSize={100002200}
          multiple={false}
          name="test"
          onChange={[Function]}
          onRemove={[Function]}
          validateStatus=""
        />
      </Col>
    </Row>
  </Form.Fieldset>
</LocalizedComponent(Form)>
`;
